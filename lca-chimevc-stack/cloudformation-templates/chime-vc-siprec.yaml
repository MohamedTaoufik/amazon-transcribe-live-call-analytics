# --- NOT USED??
#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Amazon Transcribe Live Call Analytics with Agent Assist - Chime Voice Connector with SIPREC

Parameters:
  CidrBlocks:
    Type: CommaDelimitedList
    Description: Comma Delimited list of CIDR blocks that will be allow listed to send traffic to the Chime Voice Connector.  CIDR blocks must be between /27 and /32 in length and use public IP ranges.  Example 203.0.113.128/27, 198.51.100.76/32

  AudioFilePrefix:
    Type: String
    Default: lca-audio-recordings/
    Description: >-
      The Amazon S3 prefix where the merged output audio files will be saved (must end in "/")

  MonoAudioFilePrefix:
    Type: String
    Default: lca-mono-audio-recordings/
    Description: >-
      The Amazon S3 prefix where the mono output audio files will be saved (must end in "/")

  DynamoDbExpirationInDays:
    Type: Number
    Default: 90
    Description: >-
      Number of days set in the time to live of event data stored in the DynamoDB table
    
  KinesisDataStreamName:
    Type: String
    Description: >-
      Name of Kinesis Data Stream to publish events to
  KinesisDataStreamArn:
    Type: String
    Description: >-
      Arn of Kinesis Data Stream to publish events to
  EventSourcingTableName:
    Type: String
    Description: >-
      DynamoDB Event Table name
  EventSourcingTableArn:
    Type: String
    Description: >-
      DynamoDB Event Table Arn  
  S3BucketName:
    Type: String
    Description: >-
      S3 Bucket name for recordings

  IsContentRedactionEnabled:
    Type: String
    Default: "false"
    Description: >-
      Enable content redaction from Amazon Transcribe transcription output. This is only used when
      the 'en-US' language is selected in the TranscribeLanguageCode parameter.
    AllowedValues:
      - "true"
      - "false"

  TranscribeContentRedactionType:
    Type: String
    Default: PII
    Description: >-
      Type of content redaction from Amazon Transcribe transcription output
    AllowedValues:
      - PII

  TranscribeLanguageCode:
    Type: String
    Description: >-
      Language code to be used for Amazon Transcribe
    Default: en-US
    AllowedValues:
      - en-US
      - es-US
      - en-GB
      - fr-CA
      - fr-FR
      - en-AU
      - it-IT
      - de-DE
      - pt-BR
      - ja-JP
      - ko-KR
      - zh-CN

  TranscribePiiEntityTypes:
    Type: String
    # yamllint disable rule:line-length
    Default: BANK_ACCOUNT_NUMBER,BANK_ROUTING,CREDIT_DEBIT_NUMBER,CREDIT_DEBIT_CVV,CREDIT_DEBIT_EXPIRY,PIN,EMAIL,ADDRESS,NAME,PHONE,SSN
    # yamllint enable rule:line-length
    Description: >-
      Select the PII entity types you want to identify or redact. Remove the values that you don't
      want to redact from the default.  DO NOT ADD CUSTOM VALUES HERE.

  CustomVocabularyName:
    Type: String
    Default: ''
    Description: >-
      The name of the vocabulary to use when processing the transcription job. Leave blank if no
      custom vocabulary to be used. If yes, the custom vocabulary must pre-exist in your account.
        

Resources:
  CreateVCFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  CreateVCFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - chime:CreateVoiceConnector
              - chime:PutVoiceConnectorTermination
              - chime:PutVoiceConnectorStreamingConfiguration
              - chime:DeleteVoiceConnector
              - cloudformation:DescribeStacks
              - iam:CreateServiceLinkedRole
              - iam:PutRolePolicy
            Effect: Allow
            Resource:
              - "*"
        Version: 2012-10-17
      PolicyName: CreateVCFunctionPolicy
      Roles:
        - !Ref CreateVCFunctionRole

  CreateVCFunction:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - CreateVCFunctionPolicy
    Properties:
      Role: !GetAtt
        - CreateVCFunctionRole
        - Arn
      Handler: index.on_event
      Runtime: python3.8
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import uuid
          import os
          import cfnresponse

          responseData = {}

          chime = boto3.client('chime')
          cloudformation = boto3.resource("cloudformation")

          def create_vc(event):
            response = chime.create_voice_connector(
                Name='Trunk' + str(uuid.uuid1()),
                AwsRegion=os.environ['AWS_REGION'],
                RequireEncryption=False
            )
            print(response)
            
            voiceConnectorId = response['VoiceConnector']['VoiceConnectorId']
            responseData["voiceConnectorId"] = voiceConnectorId       
            
            chime.put_voice_connector_streaming_configuration(
              VoiceConnectorId=voiceConnectorId,
              StreamingConfiguration={
                "DataRetentionInHours": 1,
                "Disabled": False,
                "StreamingNotificationTargets": [
                  {
                    "NotificationTarget": 'EventBridge'
                  }
                ]
              }
            )
            if 'CIDRBlocks' in event['ResourceProperties']:
              params = {
                    'CpsLimit': 1,
                    'CallingRegions': [
                        'US',
                    ],
                    'CidrAllowedList': event['ResourceProperties']['CIDRBlocks'],
                    'Disabled': False
              }
              print(params)
              chime.put_voice_connector_termination(
                VoiceConnectorId=voiceConnectorId,
                Termination=params)
            return responseData

          def delete_vc(event):
            stack_name = event["ResourceProperties"]["stackName"]
            stack = cloudformation.Stack(stack_name)
            outputs = {output["OutputKey"]: output["OutputValue"] for output in stack.outputs}
            if stack.outputs:
              voice_connector = outputs["VoiceConnector"]          
              chime.delete_voice_connector(VoiceConnectorId=voice_connector)

          def on_event(event, context):
            print(event)
            if event['RequestType'] == 'Create':
              try:
                responseData = create_vc(event)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)                
              except Exception as e:
                error = { 'error': f'Exception thrown: {e}'}
                print(error)
                cfnresponse.send(event, context, cfnresponse.FAILED, error )   
            elif event['RequestType'] == 'Delete':
              try:
                delete_vc(event)
                responseData = {'Message': 'Deleting VC.  Returning success status.'}                   
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)                      
              except Exception as e:
                error = { 'error': f'Exception thrown: {e}'}
                print(error)
                cfnresponse.send(event, context, cfnresponse.FAILED, error )   
            else:
                responseData = {'Message': 'Update is no-op. Returning success status.'}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  # Trigger Lambda function to create Amazon Chime App & Asterisk Instance creation
  SIPRECVoiceConnectorResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CreateVCFunction.Arn
      stackName:
        Ref: AWS::StackName
      CIDRBlocks: !If [CIDRBlockExists, !Ref CidrBlocks, !Ref "AWS::NoValue"]
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete


  ##########################################################################
  # Call Transcriber
  ##########################################################################

  CallTranscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      Description: >-
        AWS Lambda Function that will be triggered when a new call starts. This will
        read from the KVS streams, stitch the channels together, send audio to
        transcribe, and store the transcriptions in DynamoDB
      Handler: index.handler
      Layers:
        # periodically update the Lambda Insights Layer
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-extension-versions.html
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension-Arm64:2"
      Role: !GetAtt CallTranscriberFunctionRole.Arn
      Runtime: nodejs14.x
      MemorySize: 768
      Timeout: 900
      Tracing: Active
      Environment:
        Variables:
          BUFFER_SIZE: "128"
          LAMBDA_INVOKE_TIMEOUT: "720000"
          KINESIS_STREAM_NAME: !Ref KinesisDataStreamName
          EVENT_SOURCING_TABLE_NAME: !Ref EventSourcingTableName
          EXPIRATION_IN_DAYS: !Ref DynamoDbExpirationInDays
          REGION: !Ref AWS::Region
          OUTPUT_BUCKET: !Ref S3BucketName
          RECORDING_FILE_PREFIS3BucketNameX: !Ref AudioFilePrefix
          MONO_RECORDING_FILE_PREFIX: !Ref MonoAudioFilePrefix
          RAW_FILE_PREFIX: 'lca-audio-raw/'
          TEMP_FILE_PATH: '/tmp/'
          SAVE_PARTIAL_TRANSCRIPTS: 'true'
          IS_CONTENT_REDACTION_ENABLED: !If
            - ShouldEnableContentRedaction
            - 'true'
            - 'false'
          TRANSCRIBE_LANGUAGE_CODE: !Ref TranscribeLanguageCode
          CONTENT_REDACTION_TYPE: !Ref TranscribeContentRedactionType
          PII_ENTITY_TYPES: !Ref TranscribePiiEntityTypes
          CUSTOM_VOCABULARY_NAME: !Ref CustomVocabularyName
      CodeUri: ../lambda_functions/call_transcriber
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired

  CallTranscriberFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        # CloudWatch Insights Managed Policy
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - transcribe:DeleteTranscriptionJob
                  - transcribe:GetTranscriptionJob
                  - transcribe:GetVocabulary
                  - transcribe:ListTranscriptionJobs
                  - transcribe:ListVocabularies
                  - transcribe:StartStreamTranscription
                  - transcribe:StartTranscriptionJob
                Resource: "*"
              - Action:
                  - "kinesisvideo:Describe*"
                  - "kinesisvideo:Get*"
                  - "kinesisvideo:List*"
                Effect: "Allow"
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:\
                    ${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref EventSourcingTableArn

              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource:  
                  - !Ref KinesisDataStreamArn
                  
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${bucket}"
                    - bucket: !Ref S3BucketName
                  - !Sub
                    - "arn:aws:s3:::${bucket}/*"
                    - bucket: !Ref S3BucketName
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >-
              Transcribe does not support resource-level permissions and KVS streams are dynamic

  AllowEventBridgeToCallTranscriberFunctionLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref CallTranscriberFunction
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleToTriggerCallTranscriberLambda.Arn
      SourceAccount: !Ref AWS::AccountId

  EventBridgeRuleToTriggerCallTranscriberLambda:
    Type: AWS::Events::Rule
    Properties:
      Description: "This rule is triggered when the Chime VoiceConnector streaming status changes"
      EventPattern:
        detail-type:
          - "Chime VoiceConnector Streaming Status"
        source:
          - aws.chime
      Targets:
        - Id: CallTranscriberTarget
          Arn: !GetAtt CallTranscriberFunction.Arn
      State: "ENABLED"

  # Permission for Call Transcriber to invoke itself
  CallTranscriberPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CallTranscriberFunction
      Principal: !GetAtt CallTranscriberFunctionRole.Arn

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Amazon S3 Configuration
        Parameters:
          - S3BucketName
          - AudioFilePrefix
          - MonoAudioFilePrefix
    ParameterLabels:
      S3BucketName:
        default: Call Audio Bucket Name
      AudioFilePrefix:
        default: Audio File Prefix
      IsContentRedactionEnabled:
        default: Enable Content Redaction
      TranscribeContentRedactionType:
        default: Type of Content Redaction
      TranscribeLanguageCode:
        default: Transcription Language Code
      TranscribePiiEntityTypes:
        default: Transcription PII Redaction Entity Types
      CustomVocabularyName:
        default: Transcription Custom Vocabulary Name

Conditions:
  ShouldEnableContentRedaction: !And
    - !Equals [!Ref IsContentRedactionEnabled, 'true']
    - !Equals [!Ref TranscribeLanguageCode, 'en-US']
  CIDRBlockExists: !Not
    - !Equals
      - !Join ["", !Ref CidrBlocks]
      - ""

Outputs:
  VoiceConnector:
    Value:
      Fn::GetAtt:
        - SIPRECVoiceConnectorResource
        - voiceConnectorId
